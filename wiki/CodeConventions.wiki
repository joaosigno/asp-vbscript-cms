#summary Coding standards and conventions for ASP-VBScript-CMS.

= Coding Standards =

Coding standards are Language-level standards, and to be honest, ASP VBScript doesnt have many.  The VBScript language itself is case-insensitive. Newlines are important, indentation is not, and there is only one form of comments.  We have to instate some code-level conventions to follow to improve code readability and sanity, which will be a major contributing factor to long-term maintainability. As this project is not under continual development, easy-to-read code will be of huge importance to be able to come back to pick up on after leaving the code sitting for years on end :)

*Options Explicit*

VBScript is a lazy language, its of extreme importance for code maintainability to force all variables to be declared before instantiation.


= Coding Conventions =


*Indentation*

Use tabs to indent your code. You should configure your code editor to set the tabstop to 4 spaces.

*Case*

VBScript is case-insensitive.  This tends to result in sloppy inconsistencies, and less readable / maintainable code. Here are our suggested conventions for a consistent use of case throughout the application:

Use lowercase for global and local variables.
{{{
'**
'* Intialize the global filesystem object.
dim fs : set fs = Server.CreateObject("Scripting.FileSystemObject")
}}}

Use uppercase for constants.
{{{
'**
'* Default page encoding.
const DEFAULT_ENCODING = "utf8"
}}}

Prefix class variables with 'm_'.
{{{
'**
'* Class HelloWorld prints a message on a specific date.
class HelloWorld
    private m_message
    private m_date
end class
}}}

System resources and objects should use capitalization:
{{{
Response.Write "Hello world!"
dim fs : set fs = Server.CreateObject("Scripting.FileSystemObject")
}}}

Use lowercase for the language-specific keywords:
{{{
if, then, end, for, each, class, public, private,  let, set.
}}}

{{{
if [...] then
    'execute some code
end if
}}}

Use lowercase
{{{
class Apple
    public function class_initialize()
        'initialize object
    end function
end class
}}}

Use suggested mixed-case for language-specific VBScript Constants,  eg vbCrLf.
{{{
Response.Write("Hello world, followed by a newline." & vbCrLf)
}}}

Use uppercase for Keywords:
{{{
TRUE, FALSE, NULL, EMPTY, NOTHING
}}}

=== Whitespace ===

Remove all trailing whitespace when saving your code.

Separate commands with a newline.  The one exception is for declaring variables.  Since we use `Options Explicit` it is possible to chain the definition and the variable assignment on a single line, using a *colon* to separate the two commands.

{{{
dim products : set products = Server.CreateObject("Scripting.Dictionary")
}}}

Use a single whitespace to separate elements in:
*Assignments*
 * incorrect: `x=y`
 * correct: `x = y`
*Logical operands* (required by language)
 * correct: `if x and y or z then`
*String Concatenation*
 * incorrect: `x =  x&y&z&"<br/>"`
 * correct: `x = x & y & z & "<br/>"`
*Expressions*
 * incorrect: `if x<>"" then`,  `if x=5 then`
 * correct: `if x <> "" then`,   `if x = 5 then`
*Math calculations*
 * incorrect: `y=y+1`
 * correct:  `y = y + 1`

=== Parentheses ===
Do not use whitespace inside parentheses:

 * incorrect: `if ( x and y ) or z then`
 * correct: `if (x and y) or z then`

* incorrect: `if ( cstr( x ) <> cstr ( y ) ) then`
* correct: `if (cstr(x) <> cstr(y)) then`

If using parentheses to group expressions in conditional statements, use a single whitespace after the if.